/*
Лекція "Основи керування SQL-запитами в СУБД Oracle".
Частина 9 - Загальні рекомендації оптимізації SQL-запитів
*/

/*
Гарна методика оптимізації SQL-запитів:
1) не повинна вимагати налаштування
	апаратного забезпечення або операційної системи;
2) повинна враховувати лише можливості СУБД.

Етап 1 - "Optimize access structures" містить кроки:
1) Database design and normalization;
2) Tables: heap or index-organized tables:
heap-organized table - звичайна таблиця, яка зберігає рядки невпорядковано;
index-organized table - таблиця яка:
	- створена з префіксом ORGANIZATION INDEX, 
	- зберігає рядки у порядку відповідно з індексом 
		за стовпчиком первинного ключа;
3) Indexes;
4) Materialized views;
5) Partitioning schemes;
6) Statistics.

Етап 2 - "Rewrite SQL statements" містить кроки:
1) виключайте непотрібні стовпчики з проекцій
2) використовуйте EXISTS замість IN, оскільки EXISTS припиняє 
	обробку як тільки він знайде перше співпадіння.
3) використовуйте CASE та/або DECODE, щоб уникнути необхідності 
	сканувати однакові рядки знову, особливо для функцій агрегації
4) використовуйте JOIN замість підзапитів
5) уникайте неявних перетворень типів даних, 
	особливо у WHERE-фразі
6) описуйте предикати WHERE-фрази, уважно дивлячись на індекси
	з урахуванням порядку розміщення стовпчиків у складених індексах
7) уникайте, коли це можливо, таких операторів порівняння
	як <>, NOT IN, NOT EXISTS і LIKE без початкового '%' 
	для індексованих стовпчиків у предикатах
8) не застосовуйте функції до індексованих стовпчиків 
	коли немає відповідного функціонального індексу;
9) уникайте непотрібних сортувань та замість UNION
	використовуйте UNION ALL;
10) уникайте DISTINCT;
11) використовуйте PL/SQL, особливо пакети із збереженими процедурами
	та Bind-змінними 
12) додавайте підказки (Hints), але обережно

*/
